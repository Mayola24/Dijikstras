package auto;
import java.util.*;
public class dijiktras {
	int d[]=new int[10];// form source to remaining vertices
	int p[]=new int[10];
	int visited[]=new int[10];// keep track of visited vertices
	public void dijk(int[][]a, int s, int n)
	{
		int u=-1,v,i,j,min;
		for(v=0;v<n;v++)
		{
			d[v]=99;
			p[v]=-1;
		} 	
		d[s]=0;
		for(i=0;i<n;i++)
		{
			min=99;
			for(j=0;j<n;j++)
			{
				if(d[j]<min&& visited[j]==0)
				{
					min=d[j];
					u=j;
				}
			}
			visited[u]=1;
			for(v=0;v<n;v++){
				if((d[u]+a[u][v]<d[v])&&(u!=v)&&visited[v]==0)
				{
					d[v]=d[u]+a[u][v];
					p[v]=u;
				}
			}
		}
	}
	void display(int s,int n)
	{  
		int st[]=new int[n];
		for(int i=0;i<n;i++)
		{
			if(i!=s)
			{
				int v=i;
				int top=-1;
				while(p[v]!=-1)
				{     
					v=p[v];
					st[++top]=v;
				}
				while(top!=-1)
				{
					System.out.print(st[top--]+"--->");	
				}
				System.out.println(i+"="+d[i]);
			}
		}
	}
		//display function write here
	public static void main(String[] args) {
		int a[][]=new int[10][10];
		int i,j,n,s;
		System.out.println("enter the number of vertices");
		Scanner sc = new Scanner(System.in);
		n=sc.nextInt();
		System.out.println("enter the weighted matrix");
		for(i=0;i<n;i++)
			for(j=0;j<n;j++)
				a[i][j]=sc.nextInt();
		System.out.println("enter the source vertex");
		s=sc.nextInt();
		dijiktras tr=new dijiktras();
		tr.dijk(a,s,n);
		System.out.println("the shortest path between source"+s+"to remaining vertices are");
		tr.display(s,n);
		sc.close();
	}
}

